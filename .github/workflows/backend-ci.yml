name: Backend CI

on:
  push:
    paths:
      - 'cloud/backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    paths:
      - 'cloud/backend/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  verify-and-smoke:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: cloud/backend
    env:
      ENV: dev
      RATE_LIMIT_ALLOW_MEMORY_FALLBACK: 'true'
      SECRET_KEY: test-secret
      # 使用独立的 SQLite DB 路径以模拟双库
      DATABASE_URL_USERS: sqlite:////home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/cloud/backend/.ci_users.db
      DATABASE_URL_POOL: sqlite:////home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/cloud/backend/.ci_pool.db
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install fastapi==0.115.0 "uvicorn[standard]"==0.30.6 SQLAlchemy==2.0.35 itsdangerous==2.2.0 requests==2.32.3

      - name: Initialize dual SQLite schemas
        run: |
          python - << 'PY'
          from app.database import BaseUsers, BasePool, engine_users, engine_pool
          from app import models  # ensure metadata registered
          BaseUsers.metadata.create_all(bind=engine_users)
          BasePool.metadata.create_all(bind=engine_pool)
          print('Users tables:', len(BaseUsers.metadata.tables))
          print('Pool tables:', len(BasePool.metadata.tables))
          PY

      - name: Verify dual migrations boundaries
        run: |
          python cloud/backend/scripts/verify_dual_migrations.py

      - name: Launch API (background)
        run: |
          nohup python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 3

      - name: Smoke - system
        run: |
          curl -sf http://localhost:8000/api/admin/system | tee /tmp/system.json
          test $(jq -r '.env' /tmp/system.json) != null

      - name: Smoke - db status
        run: |
          curl -sf http://localhost:8000/api/admin/db-status | tee /tmp/dbs.json
          test $(jq -r '.users.ok' /tmp/dbs.json) = true
          test $(jq -r '.pool.ok' /tmp/dbs.json) = true

      - name: Smoke - metrics
        run: |
          curl -sf -D /tmp/headers.txt http://localhost:8000/metrics > /tmp/metrics.txt
          grep -q 'text/plain' /tmp/headers.txt
